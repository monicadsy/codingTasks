{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Q14 Understand how HTTP applications preserve the state of an application across multiple request-response cycles, especially concerning user authentication and session management. You may submit your findings as a text document or markdown file.\
\
HTTP Request and Response cycle\
\
a key characteristic of HTTP is that it is stateless.This means there is not link between two successive requests. This could lead to issues when a user is interacting with a web-page such as online shopping or when logged-in to an account and navigating to different pages within the web-application. Maintaining sate across mutiple request-response cycles is important, especially for user authentication and session management. There are several methods used to preserve state in HTTP applications:\
\
1. HTTP Cookies: which are small piece of data stored on the browser and used to remeber info about the user across mutiple requests.\
\
There are 2 types of cookies: Session Cookies and Persistent Cookies. Session cookies are temporary and are deleted when the user closes their browser while Persistent cookies have an expiration date and remain on the user\'92s device until they expire or are deleted.\
\
For user authentication: when a user logs in, the server generates a unique session ID, which is sent to the user as a cookie. For subsequent requests, the user sends this cookie back to the server. The server uses the session ID from the cookie to identify the user and their session data.\
\
2. Token-based Authentication: tokens are a more modern approach to maintaining state, especially in distributed and stateless systems like RESTful APIs. For example JWT token and OAuth. \
\
When user logs in the server generates a token, the token is sent to the user and stored (usually in local storage or session storage). For subsequent requests, the client includes the token (typically in the authorization header). The server validates the token and retrieves user information from it to process the request.\
\
3. Local Storage and Session Storage: these are client-side storage options provided by modern browsers. Local storage stores data with no expiration date and the data persists even after the browser is closed while session storage stores data for the duration of the page session. The data is deleted when the page session ends (i.e. the browser is closed)\
\
4 HTTP Headers: custom header can also be used to pass state information where applications can define custom headers to pass necessary state information.\
\
5 URL Parameters: state can also be passed via URL parameters, although this is less common due to security and user experience concerns. \
\
In practice, application often use a combination of these techniques to manage state. For example: use cookes and tokens as well as additional user preferences in local storage.\
\
\
}